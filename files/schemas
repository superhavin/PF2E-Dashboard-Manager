CREATE TABLE IF NOT EXISTS Size(size_type VARCHAR(32) UNIQUE NOT NULL, UNIQUE KEY Size(size_type) );
CREATE TABLE IF NOT EXISTS AbilityBoost(ability_boost DECIMAL(2,1) DEFAULT 0, UNIQUE KEY ability_boost(ability_boost));
CREATE TABLE IF NOT EXISTS Ability(ability_name VARCHAR(32) NOT NULL, UNIQUE KEY Ability(ability_name) );
CREATE TABLE IF NOT EXISTS AbilityScore(ability_name VARCHAR(32) NOT NULL, ability_boost DECIMAL(2,1) DEFAULT 0, UNIQUE KEY ability_score(ability_name, ability_boost), FOREIGN KEY (ability_name) REFERENCES Ability(ability_name), FOREIGN KEY (ability_boost) REFERENCES AbilityBoost(ability_boost) );
CREATE TABLE IF NOT EXISTS Proficiency(proficiency_rank VARCHAR(32) UNIQUE NOT NULL, UNIQUE KEY Proficiency(proficiency_rank) );
CREATE TABLE IF NOT EXISTS Skill(skill_name VARCHAR(32) NOT NULL, UNIQUE KEY Skill(skill_name) );
CREATE TABLE IF NOT EXISTS SkillRank(skill_name VARCHAR(32) NOT NULL, proficiency_rank VARCHAR(32) NOT NULL, UNIQUE KEY skill_rank(skill_name, proficiency_rank), FOREIGN KEY (skill_name) REFERENCES Skill(skill_name), FOREIGN KEY (proficiency_rank) REFERENCES Proficiency(proficiency_rank) );
CREATE TABLE IF NOT EXISTS Feature(feature_name VARCHAR(32) UNIQUE NOT NULL, UNIQUE KEY Feature(feature_name) );
CREATE TABLE IF NOT EXISTS FeatureRank(feature_name VARCHAR(32) NOT NULL, proficiency_rank VARCHAR(32) NOT NULL, UNIQUE KEY FeatureRank(feature_name, proficiency_rank) );
CREATE TABLE IF NOT EXISTS Ancestry(ancestry_name VARCHAR(32) UNIQUE NOT NULL, hit_points INT NOT NULL, size VARCHAR(32) NOT NULL, speed INT NOT NULL, languages JSON NOT NULL, vision ENUM('low-light', 'dark', 'greater dark') DEFAULT NULL, CONSTRAINT size_limit CHECK(NOT(size = 'huge' OR size = 'gargantuan')), UNIQUE KEY Ancestry(ancestry_name), FOREIGN KEY (size) REFERENCES Size(size_type) );
CREATE TABLE IF NOT EXISTS AncestryBoost(ancestry_name VARCHAR(32) NOT NULL, ability_name VARCHAR(32) DEFAULT NULL, ability_flaw BOOLEAN NOT NULL, CONSTRAINT free_or_flaw CHECK(NOT(ability_flaw AND ability_name IS NULL)), FOREIGN KEY (ancestry_name) REFERENCES Ancestry(ancestry_name), FOREIGN KEY (ability_name) REFERENCES Ability(ability_name) );
CREATE TABLE IF NOT EXISTS AncestryHeritage(ancestry_name VARCHAR(32) NOT NULL, heritage_name varchar(32) NOT NULL, reference_title JSON DEFAULT NULL, skill_name VARCHAR(32) DEFAULT NULL, feature_name VARCHAR(32) DEFAULT NULL, feature_proficiency VARCHAR(32) DEFAULT NULL, CHECK(NOT(feature_proficiency = 'untrained')), UNIQUE KEY AncestryHeritage(ancestry_name, heritage_name), FOREIGN KEY (ancestry_name) REFERENCES Ancestry(ancestry_name), FOREIGN KEY (skill_name) REFERENCES Skill(skill_name), FOREIGN KEY (feature_name, feature_proficiency) REFERENCES FeatureRank(feature_name, proficiency_rank) );
CREATE TABLE IF NOT EXISTS Background(background_name VARCHAR(32) UNIQUE NOT NULL, lore_name VARCHAR(32) DEFAULT NULL, reference_title JSON DEFAULT NULL, CONSTRAINT background_title PRIMARY KEY (background_name),FOREIGN KEY (lore_name) REFERENCES Skill(skill_name) );
CREATE TABLE IF NOT EXISTS BackgroundSkill(background_name VARCHAR(32) NOT NULL, skill_name VARCHAR(32) DEFAULT NULL, additional_skill BOOLEAN NOT NULL, UNIQUE KEY (background_name, skill_name), FOREIGN KEY (background_name) REFERENCES Background(background_name), FOREIGN KEY (skill_name) REFERENCES Skill(skill_name) );
CREATE TABLE IF NOT EXISTS BackgroundBoost(background_name VARCHAR(32) NOT NULL, ability_boost VARCHAR(32) DEFAULT NULL, UNIQUE KEY (background_name, ability_boost), FOREIGN KEY (background_name) REFERENCES Background(background_name), FOREIGN KEY (ability_boost) REFERENCES Ability(ability_name) );
CREATE TABLE IF NOT EXISTS Class(class_name VARCHAR(32) UNIQUE NOT NULL, key_ability VARCHAR(32) NOT NULL, hit_points INT NOT NULL DEFAULT 6, additional_skills INT NOT NULL DEFAULT 2, secondary_ability VARCHAR(32) DEFAULT NULL, UNIQUE KEY class(class_name), FOREIGN KEY (key_ability) REFERENCES Ability(ability_name), FOREIGN KEY (secondary_ability) REFERENCES Ability(ability_name));
CREATE TABLE IF NOT EXISTS ClassProficiency(class_name VARCHAR(32) NOT NULL, feature_name VARCHAR(32) NOT NULL, feature_proficiency VARCHAR(32) DEFAULT 'untrained', UNIQUE KEY(class_name, feature_name), FOREIGN KEY (class_name) REFERENCES Class(class_name), FOREIGN KEY (feature_name, feature_proficiency) REFERENCES FeatureRank(feature_name, proficiency_rank) );
CREATE TABLE IF NOT EXISTS ClassSkill(class_name VARCHAR(32) NOT NULL, skill_name VARCHAR(32) NOT NULL, additional_skill BOOLEAN NOT NULL, UNIQUE KEY (class_name, skill_name), FOREIGN KEY (class_name) REFERENCES Class(class_name), FOREIGN KEY (skill_name) REFERENCES Skill(skill_name) );
# CREATE TABLE IF NOT EXISTS ClassOption(class_name VARCHAR(32) NOT NULL, option_level INT NOT NULL, class_option VARCHAR(32) DEFAULT NULL, reference_title JSON DEFAULT NULL, trained_skills JSON DEFAULT NULL, feature_name VARCHAR(32) DEFAULT NULL, feature_proficiency VARCHAR(32) DEFAULT NULL, CHECK(NOT(feature_proficiency = 'untrained')), FOREIGN KEY (class_name) REFERENCES Class(class_name), FOREIGN KEY (feature_name, feature_proficiency) REFERENCES FeatureRank(feature_name, proficiency_rank) );
CREATE TABLE IF NOT EXISTS Action(action_name VARCHAR(32) NOT NULL, action_level INT NOT NULL, frequency VARCHAR(32) DEFAULT NULL, action ENUM('one-action', 'two-action', 'three-action', 'reaction', 'free-action', 'first-action to three-action', 'first-action or two-action', 'two-action or three-action') DEFAULT NULL, `trigger` TEXT DEFAULT NULL, requirement TEXT DEFAULT NULL, CONSTRAINT action_title PRIMARY KEY (action_name, action_level));
CREATE TABLE IF NOT EXISTS Source(id INT NOT NULL AUTO_INCREMENT, name VARCHAR(32) NOT NULL, level INT DEFAULT NULL, book VARCHAR(64) NOT NULL, page INT NOT NULL, description TEXT NOT NULL, rarity ENUM('Common', 'Uncommon', 'Rare', 'Unique') DEFAULT 'Common', traits JSON DEFAULT NULL, prerequisites JSON DEFAULT NULL, PRIMARY KEY (id), UNIQUE KEY title (name, level), UNIQUE KEY description_summary (description(256)) );
CREATE TABLE IF NOT EXISTS Tradition(tradition_name VARCHAR(32) NOT NULL, UNIQUE KEY SpellList(tradition_name) );
CREATE TABLE IF NOT EXISTS Spell(spell_name VARCHAR(32) NOT NULL, spell_rank INT NOT NULL, tradition VARCHAR(32) NOT NULL, `range` INT DEFAULT NULL, target varchar(64) DEFAULT NULL, area varchar(64) DEFAULT NULL, defense varchar(64) DEFAULT NULL, cast varchar(64) DEFAULT NULL, duration INT DEFAULT NULL, heightened JSON DEFAULT NULL, CONSTRAINT spell_title PRIMARY KEY (spell_name, spell_rank, tradition), FOREIGN KEY (tradition) REFERENCES Tradition(tradition_name) );
CREATE TABLE IF NOT EXISTS SpellList(name VARCHAR(32) NOT NULL, tradition VARCHAR(32) NOT NULL, list_type ENUM('prepared', 'spontaneous', 'focus', 'innate') DEFAULT 'innate', spellcasting_ability VARCHAR(32) DEFAULT NULL, spells_per_level INT DEFAULT 0, cantrips INT DEFAULT 5, granted_spell JSON DEFAULT NULL, CONSTRAINT spell_list_title PRIMARY KEY (name, tradition, list_type), FOREIGN KEY (tradition) REFERENCES Tradition(tradition_name),FOREIGN KEY (spellcasting_ability) REFERENCES Ability(ability_name) );
CREATE TABLE IF NOT EXISTS ClassFeat(feat_name VARCHAR(32) NOT NULL, feat_level INT NOT NULL, class_name VARCHAR(32) NOT NULL, ability_name VARCHAR(32) DEFAULT NULL, ability_boost DECIMAL (2,0) DEFAULT NULL, skill_name VARCHAR(32) DEFAULT NULL, skill_proficiency VARCHAR(32) DEFAULT NULL, feature_name VARCHAR(32) DEFAULT NULL, feature_proficiency VARCHAR(32) DEFAULT NULL, CHECK(NOT(skill_proficiency = 'untrained' OR feature_proficiency = 'untrained')), CONSTRAINT class_feat_title PRIMARY KEY (feat_name, feat_level, class_name), FOREIGN KEY (class_name) REFERENCES Class(class_name), FOREIGN KEY (ability_name, ability_boost) REFERENCES AbilityScore(ability_name, ability_boost), FOREIGN KEY (skill_name, skill_proficiency) REFERENCES SkillRank(skill_name, proficiency_rank), FOREIGN KEY (feature_name, feature_proficiency) REFERENCES FeatureRank(feature_name, proficiency_rank) );
CREATE TABLE IF NOT EXISTS AncestryFeat(feat_name VARCHAR(32) NOT NULL, feat_level INT NOT NULL, ancestry_name VARCHAR(32) NOT NULL, ability_name VARCHAR(32) DEFAULT NULL, ability_boost DECIMAL (2,0) DEFAULT NULL, skill_name VARCHAR(32) DEFAULT NULL, skill_proficiency VARCHAR(32) DEFAULT NULL, feature_name VARCHAR(32) DEFAULT NULL, feature_proficiency VARCHAR(32) DEFAULT NULL, CHECK(NOT(skill_proficiency = 'untrained' OR feature_proficiency = 'untrained')), CONSTRAINT ancestry_feat_title PRIMARY KEY (feat_name, feat_level, ancestry_name), FOREIGN KEY (ancestry_name) REFERENCES Ancestry(ancestry_name), FOREIGN KEY (ability_name, ability_boost) REFERENCES AbilityScore(ability_name, ability_boost), FOREIGN KEY (skill_name, skill_proficiency) REFERENCES SkillRank(skill_name, proficiency_rank), FOREIGN KEY (feature_name, feature_proficiency) REFERENCES FeatureRank(feature_name, proficiency_rank) );
CREATE TABLE IF NOT EXISTS GeneralFeat(feat_name VARCHAR(32) NOT NULL, feat_level INT NOT NULL, ability_name VARCHAR(32) DEFAULT NULL, ability_boost DECIMAL (2,0) DEFAULT NULL, skill_name VARCHAR(32) DEFAULT NULL, skill_proficiency VARCHAR(32) DEFAULT NULL, feature_name VARCHAR(32) DEFAULT NULL, feature_proficiency VARCHAR(32) DEFAULT NULL, CHECK(NOT(skill_proficiency = 'untrained' OR feature_proficiency = 'untrained')), CONSTRAINT general_feat_title PRIMARY KEY (feat_name, feat_level), FOREIGN KEY (ability_name, ability_boost) REFERENCES AbilityScore(ability_name, ability_boost), FOREIGN KEY (skill_name, skill_proficiency) REFERENCES SkillRank(skill_name, proficiency_rank), FOREIGN KEY (feature_name, feature_proficiency) REFERENCES FeatureRank(feature_name, proficiency_rank) );
CREATE TABLE IF NOT EXISTS SkillFeat(feat_name VARCHAR(32) NOT NULL, feat_level INT NOT NULL, skill_name VARCHAR(32) NOT NULL, skill_proficiency VARCHAR(32) NOT NULL, ability_name VARCHAR(32) DEFAULT NULL, ability_boost DECIMAL (2,0) DEFAULT NULL, feature_name VARCHAR(32) DEFAULT NULL, feature_proficiency VARCHAR(32) DEFAULT NULL, CHECK(NOT(skill_proficiency = 'untrained' OR feature_proficiency = 'untrained')), CONSTRAINT skill_feat_title PRIMARY KEY (feat_name, feat_level, skill_name), FOREIGN KEY (ability_name, ability_boost) REFERENCES AbilityScore(ability_name, ability_boost), FOREIGN KEY (skill_name, skill_proficiency) REFERENCES SkillRank(skill_name, proficiency_rank), FOREIGN KEY (feature_name, feature_proficiency) REFERENCES FeatureRank(feature_name, proficiency_rank) );
CREATE TABLE IF NOT EXISTS ArchetypeFeat(feat_name VARCHAR(32) NOT NULL UNIQUE, feat_level INT NOT NULL, archetype_dedication BOOLEAN NOT NULL, ancestry_name VARCHAR(32) DEFAULT NULL, class_name VARCHAR(32) DEFAULT NULL, ability_name VARCHAR(32) DEFAULT NULL, ability_boost DECIMAL(2,0) DEFAULT NULL, skill_name VARCHAR(32) DEFAULT NULL, skill_proficiency VARCHAR(32) DEFAULT NULL, feature_name VARCHAR(32) DEFAULT NULL, feature_proficiency VARCHAR(32) DEFAULT NULL, CHECK(NOT(skill_proficiency = 'untrained' OR feature_proficiency = 'untrained')), CONSTRAINT archetype_feat_title PRIMARY KEY (feat_name, feat_level), FOREIGN KEY (ancestry_name) REFERENCES Ancestry(ancestry_name), FOREIGN KEY (class_name) REFERENCES Class(class_name), FOREIGN KEY (ability_name, ability_boost) REFERENCES AbilityScore(ability_name, ability_boost), FOREIGN KEY (skill_name, skill_proficiency) REFERENCES SkillRank(skill_name, proficiency_rank), FOREIGN KEY (feature_name, feature_proficiency) REFERENCES FeatureRank(feature_name, proficiency_rank) );
